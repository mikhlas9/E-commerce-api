openapi: 3.0.0
info:
  title: Your API Title
  description: Description of your API
  version: 1.0.0
paths:
  tags:
    name: User
    description: The User managing API
  /register:
    post:
      summary: Register a new user
      description: Register a new user with the provided name, email, and password.
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  token:
                    type: string
        '400':
          description: User registration failed
        '409':
          description: User Already exists
  /login:
    post:
      summary: User login
      description: Authenticate user with email and password.
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  token:
                    type: string
        '401':
          description: Invalid email or password
        '404':
          description: User not found
    name: Category
    description: The Category managing API
  /category/add:
    post:
      summary: Add a new category
      description: Add a new category with the provided name.
      tags: [Category]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
      responses:
        '201':
          description: Category added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Category'
        '409':
          description: Category already exists
        '500':
          description: Failed to add category
  /categories:
    get:
      summary: Get all categories
      description: Retrieve a list of all categories.
      tags: [Category]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  allCategories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
    name: Products
    description: The Product managing API
  /products/add:
    post:
      summary: Add a new product
      description: Add a new product with the provided category ID, title, description, price, and availability.
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryId:
                  type: string
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                availability:
                  type: number
      responses:
        '201':
          description: Product added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Invalid request body
        '500':
          description: Failed to add product
  /products/category/{categoryId}:
    get:
      summary: Get products by category
      description: Retrieve a list of products belonging to the specified category.
      tags: [Products]
      parameters:
        - in: path
          name: categoryId
          required: true
          description: ID of the category
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '404':
          description: No products found for the specified category
        '500':
          description: Failed to retrieve products
  /products/details/{productId}:
    get:
      summary: Get product details
      description: Retrieve details of the specified product.
      tags: [Products]
      parameters:
        - in: path
          name: productId
          required: true
          description: ID of the product
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Failed to retrieve product
  /products/update/{productId}:
    put:
      summary: Update product
      description: Update the specified product with new price and availability information.
      tags: [Products]
      parameters:
        - in: path
          name: productId
          required: true
          description: ID of the product
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                availability:
                  type: number
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Failed to update product
    name: Cart
    description: The Cart managing API
  /cart/add:
    post:
      summary: Add a product to the cart
      description: Add a product to the user's cart with the specified quantity.
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: ID of the product to add to the cart
                quantity:
                  type: integer
                  description: Quantity of the product to add
      responses:
        '200':
          description: Product added to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the operation was successful
                  message:
                    type: string
                    description: Information message
                  data:
                    $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request. Missing or invalid parameters.
        '404':
          description: Product not found or not available.
        '500':
          description: Internal server error. Failed to add product to cart.
  /cart/view:
    get:
      summary: View user's cart
      description: Retrieve the current user's cart with all the products added.
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the operation was successful
                  data:
                    $ref: '#/components/schemas/Cart'
        '404':
          description: Cart not found.
        '500':
          description: Internal server error. Failed to retrieve cart.
  /cart/update:
    put:
      summary: Update product quantity in cart
      description: Update the quantity of a product in the user's cart.
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: ID of the product to update in the cart
                quantity:
                  type: integer
                  description: New quantity of the product in the cart
      responses:
        '200':
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the operation was successful
                  message:
                    type: string
                    description: Information message
                  data:
                    $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request. Missing or invalid parameters.
        '404':
          description: Product not found in cart.
        '500':
          description: Internal server error. Failed to update product quantity.
  /cart/remove:
    delete:
      summary: Remove product from cart
      description: Remove a product from the user's cart.
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: ID of the product to remove from the cart
      responses:
        '200':
          description: Product removed from cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the operation was successful
                  message:
                    type: string
                    description: Information message
                  data:
                    $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request. Missing or invalid parameters.
        '404':
          description: Product not found in cart.
        '500':
          description: Internal server error. Failed to remove product from cart.
    name: Orders
    description: The Order managing API
  /orders/place:
    post:
      summary: Place an order
      description: Place a new order with the provided items in the user's cart.
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request. Cart is empty.
        '401':
          description: Unauthorized. User not authenticated.
        '500':
          description: Internal server error. Failed to place order.
  /orders/history:
    get:
      summary: Get order history
      description: Retrieve the order history for the authenticated user.
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderHistoryResponse'
        '401':
          description: Unauthorized. User not authenticated.
        '500':
          description: Internal server error. Failed to fetch order history.
  /orders/details/{orderId}:
    get:
      summary: Get order details
      description: Retrieve the details of a specific order by its ID.
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          description: ID of the order to retrieve details for
          schema:
            type: string
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized. User not authenticated.
        '404':
          description: Order not found.
        '500':
          description: Internal server error. Failed to fetch order details.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the user
        name:
          type: string
          description: The name of the user
        email:
          type: string
          format: email
          description: The email address of the user
        password:
          type: string
          format: password
          description: The password of the user (hashed)
    Category:
      type: object
      properties:
        _id:
          type: string
          description: The unique id of the category
        category:
          type: string
          description: The name of the category
    Product:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the product.
        category:
          type: string
          description: The ID of the category to which the product belongs.
        title:
          type: string
          description: The title or name of the product.
        description:
          type: string
          description: A description or details about the product.
        price:
          type: number
          description: The price of the product.
        availability:
          type: number
          description: The availability or stock quantity of the product.
    Cart:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the product.
        user:
          type: string
          description: ID of the user who owns the cart
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartProduct'
        total:
          type: number
          description: Total price of all products in the cart
        createdAt:
          type: string
          format: date-time
          description: Date and time when the cart was created
    CartProduct:
      type: object
      properties:
        product:
          type: string
          description: ID of the product
        quantity:
          type: integer
          description: Quantity of the product in the cart
    Order:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the order.
        user:
          type: string
          description: ID of the user who placed the order
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderProduct'
          description: List of products in the order
        total:
          type: number
          description: Total price of the order
        createdAt:
          type: string
          format: date-time
          description: Date and time when the order was created
    OrderProduct:
      type: object
      properties:
        product:
          type: string
          description: ID of the product
        quantity:
          type: integer
          description: Quantity of the product in the order
    OrderPlacementRequest:
      type: object
      properties:
        cartId:
          type: string
          description: ID of the user's cart
      required:
        - cartId
    OrderHistoryResponse:
      type: array
      items:
        $ref: '#/components/schemas/Order'
      description: List of orders in the user's order history
